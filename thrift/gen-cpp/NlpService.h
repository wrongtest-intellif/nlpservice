/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NlpService_H
#define NlpService_H

#include <thrift/TDispatchProcessor.h>
#include "nlpservice_types.h"

namespace nlpservice {

class NlpServiceIf {
 public:
  virtual ~NlpServiceIf() {}
  virtual void wordcut_ictclas(std::string& _return, const IctclasWork& work) = 0;
  virtual void fan2jian_opencc(std::string& _return, const std::string& sentence) = 0;
  virtual void jian2fan_opencc(std::string& _return, const std::string& sentence) = 0;
};

class NlpServiceIfFactory {
 public:
  typedef NlpServiceIf Handler;

  virtual ~NlpServiceIfFactory() {}

  virtual NlpServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NlpServiceIf* /* handler */) = 0;
};

class NlpServiceIfSingletonFactory : virtual public NlpServiceIfFactory {
 public:
  NlpServiceIfSingletonFactory(const boost::shared_ptr<NlpServiceIf>& iface) : iface_(iface) {}
  virtual ~NlpServiceIfSingletonFactory() {}

  virtual NlpServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NlpServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<NlpServiceIf> iface_;
};

class NlpServiceNull : virtual public NlpServiceIf {
 public:
  virtual ~NlpServiceNull() {}
  void wordcut_ictclas(std::string& /* _return */, const IctclasWork& /* work */) {
    return;
  }
  void fan2jian_opencc(std::string& /* _return */, const std::string& /* sentence */) {
    return;
  }
  void jian2fan_opencc(std::string& /* _return */, const std::string& /* sentence */) {
    return;
  }
};

typedef struct _NlpService_wordcut_ictclas_args__isset {
  _NlpService_wordcut_ictclas_args__isset() : work(false) {}
  bool work;
} _NlpService_wordcut_ictclas_args__isset;

class NlpService_wordcut_ictclas_args {
 public:

  NlpService_wordcut_ictclas_args() {
  }

  virtual ~NlpService_wordcut_ictclas_args() throw() {}

  IctclasWork work;

  _NlpService_wordcut_ictclas_args__isset __isset;

  void __set_work(const IctclasWork& val) {
    work = val;
  }

  bool operator == (const NlpService_wordcut_ictclas_args & rhs) const
  {
    if (!(work == rhs.work))
      return false;
    return true;
  }
  bool operator != (const NlpService_wordcut_ictclas_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NlpService_wordcut_ictclas_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NlpService_wordcut_ictclas_pargs {
 public:


  virtual ~NlpService_wordcut_ictclas_pargs() throw() {}

  const IctclasWork* work;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NlpService_wordcut_ictclas_result__isset {
  _NlpService_wordcut_ictclas_result__isset() : success(false) {}
  bool success;
} _NlpService_wordcut_ictclas_result__isset;

class NlpService_wordcut_ictclas_result {
 public:

  NlpService_wordcut_ictclas_result() : success() {
  }

  virtual ~NlpService_wordcut_ictclas_result() throw() {}

  std::string success;

  _NlpService_wordcut_ictclas_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const NlpService_wordcut_ictclas_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NlpService_wordcut_ictclas_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NlpService_wordcut_ictclas_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NlpService_wordcut_ictclas_presult__isset {
  _NlpService_wordcut_ictclas_presult__isset() : success(false) {}
  bool success;
} _NlpService_wordcut_ictclas_presult__isset;

class NlpService_wordcut_ictclas_presult {
 public:


  virtual ~NlpService_wordcut_ictclas_presult() throw() {}

  std::string* success;

  _NlpService_wordcut_ictclas_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NlpService_fan2jian_opencc_args__isset {
  _NlpService_fan2jian_opencc_args__isset() : sentence(false) {}
  bool sentence;
} _NlpService_fan2jian_opencc_args__isset;

class NlpService_fan2jian_opencc_args {
 public:

  NlpService_fan2jian_opencc_args() : sentence() {
  }

  virtual ~NlpService_fan2jian_opencc_args() throw() {}

  std::string sentence;

  _NlpService_fan2jian_opencc_args__isset __isset;

  void __set_sentence(const std::string& val) {
    sentence = val;
  }

  bool operator == (const NlpService_fan2jian_opencc_args & rhs) const
  {
    if (!(sentence == rhs.sentence))
      return false;
    return true;
  }
  bool operator != (const NlpService_fan2jian_opencc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NlpService_fan2jian_opencc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NlpService_fan2jian_opencc_pargs {
 public:


  virtual ~NlpService_fan2jian_opencc_pargs() throw() {}

  const std::string* sentence;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NlpService_fan2jian_opencc_result__isset {
  _NlpService_fan2jian_opencc_result__isset() : success(false) {}
  bool success;
} _NlpService_fan2jian_opencc_result__isset;

class NlpService_fan2jian_opencc_result {
 public:

  NlpService_fan2jian_opencc_result() : success() {
  }

  virtual ~NlpService_fan2jian_opencc_result() throw() {}

  std::string success;

  _NlpService_fan2jian_opencc_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const NlpService_fan2jian_opencc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NlpService_fan2jian_opencc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NlpService_fan2jian_opencc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NlpService_fan2jian_opencc_presult__isset {
  _NlpService_fan2jian_opencc_presult__isset() : success(false) {}
  bool success;
} _NlpService_fan2jian_opencc_presult__isset;

class NlpService_fan2jian_opencc_presult {
 public:


  virtual ~NlpService_fan2jian_opencc_presult() throw() {}

  std::string* success;

  _NlpService_fan2jian_opencc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _NlpService_jian2fan_opencc_args__isset {
  _NlpService_jian2fan_opencc_args__isset() : sentence(false) {}
  bool sentence;
} _NlpService_jian2fan_opencc_args__isset;

class NlpService_jian2fan_opencc_args {
 public:

  NlpService_jian2fan_opencc_args() : sentence() {
  }

  virtual ~NlpService_jian2fan_opencc_args() throw() {}

  std::string sentence;

  _NlpService_jian2fan_opencc_args__isset __isset;

  void __set_sentence(const std::string& val) {
    sentence = val;
  }

  bool operator == (const NlpService_jian2fan_opencc_args & rhs) const
  {
    if (!(sentence == rhs.sentence))
      return false;
    return true;
  }
  bool operator != (const NlpService_jian2fan_opencc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NlpService_jian2fan_opencc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NlpService_jian2fan_opencc_pargs {
 public:


  virtual ~NlpService_jian2fan_opencc_pargs() throw() {}

  const std::string* sentence;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NlpService_jian2fan_opencc_result__isset {
  _NlpService_jian2fan_opencc_result__isset() : success(false) {}
  bool success;
} _NlpService_jian2fan_opencc_result__isset;

class NlpService_jian2fan_opencc_result {
 public:

  NlpService_jian2fan_opencc_result() : success() {
  }

  virtual ~NlpService_jian2fan_opencc_result() throw() {}

  std::string success;

  _NlpService_jian2fan_opencc_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const NlpService_jian2fan_opencc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NlpService_jian2fan_opencc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NlpService_jian2fan_opencc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NlpService_jian2fan_opencc_presult__isset {
  _NlpService_jian2fan_opencc_presult__isset() : success(false) {}
  bool success;
} _NlpService_jian2fan_opencc_presult__isset;

class NlpService_jian2fan_opencc_presult {
 public:


  virtual ~NlpService_jian2fan_opencc_presult() throw() {}

  std::string* success;

  _NlpService_jian2fan_opencc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class NlpServiceClient : virtual public NlpServiceIf {
 public:
  NlpServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  NlpServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void wordcut_ictclas(std::string& _return, const IctclasWork& work);
  void send_wordcut_ictclas(const IctclasWork& work);
  void recv_wordcut_ictclas(std::string& _return);
  void fan2jian_opencc(std::string& _return, const std::string& sentence);
  void send_fan2jian_opencc(const std::string& sentence);
  void recv_fan2jian_opencc(std::string& _return);
  void jian2fan_opencc(std::string& _return, const std::string& sentence);
  void send_jian2fan_opencc(const std::string& sentence);
  void recv_jian2fan_opencc(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NlpServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<NlpServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (NlpServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_wordcut_ictclas(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fan2jian_opencc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_jian2fan_opencc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NlpServiceProcessor(boost::shared_ptr<NlpServiceIf> iface) :
    iface_(iface) {
    processMap_["wordcut_ictclas"] = &NlpServiceProcessor::process_wordcut_ictclas;
    processMap_["fan2jian_opencc"] = &NlpServiceProcessor::process_fan2jian_opencc;
    processMap_["jian2fan_opencc"] = &NlpServiceProcessor::process_jian2fan_opencc;
  }

  virtual ~NlpServiceProcessor() {}
};

class NlpServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NlpServiceProcessorFactory(const ::boost::shared_ptr< NlpServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NlpServiceIfFactory > handlerFactory_;
};

class NlpServiceMultiface : virtual public NlpServiceIf {
 public:
  NlpServiceMultiface(std::vector<boost::shared_ptr<NlpServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NlpServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NlpServiceIf> > ifaces_;
  NlpServiceMultiface() {}
  void add(boost::shared_ptr<NlpServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void wordcut_ictclas(std::string& _return, const IctclasWork& work) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->wordcut_ictclas(_return, work);
    }
    ifaces_[i]->wordcut_ictclas(_return, work);
    return;
  }

  void fan2jian_opencc(std::string& _return, const std::string& sentence) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fan2jian_opencc(_return, sentence);
    }
    ifaces_[i]->fan2jian_opencc(_return, sentence);
    return;
  }

  void jian2fan_opencc(std::string& _return, const std::string& sentence) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->jian2fan_opencc(_return, sentence);
    }
    ifaces_[i]->jian2fan_opencc(_return, sentence);
    return;
  }

};

} // namespace

#endif
