/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "nlpservice_types.h"

#include <algorithm>

namespace nlpservice {

int _kPosMapValues[] = {
  PosMap::PKU1,
  PosMap::PKU2,
  PosMap::ICT1,
  PosMap::ICT2
};
const char* _kPosMapNames[] = {
  "PKU1",
  "PKU2",
  "ICT1",
  "ICT2"
};
const std::map<int, const char*> _PosMap_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPosMapValues, _kPosMapNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* IctclasWork::ascii_fingerprint = "D6FD826D949221396F4FFC3ECCD3D192";
const uint8_t IctclasWork::binary_fingerprint[16] = {0xD6,0xFD,0x82,0x6D,0x94,0x92,0x21,0x39,0x6F,0x4F,0xFC,0x3E,0xCC,0xD3,0xD1,0x92};

uint32_t IctclasWork::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sentence);
          this->__isset.sentence = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->posmap = (PosMap::type)ecast0;
          this->__isset.posmap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IctclasWork::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IctclasWork");

  xfer += oprot->writeFieldBegin("sentence", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->sentence);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("posmap", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->posmap);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IctclasWork &a, IctclasWork &b) {
  using ::std::swap;
  swap(a.sentence, b.sentence);
  swap(a.posmap, b.posmap);
  swap(a.__isset, b.__isset);
}

const char* InvalidOperation::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t InvalidOperation::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t InvalidOperation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t InvalidOperation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("InvalidOperation");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(InvalidOperation &a, InvalidOperation &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

} // namespace
